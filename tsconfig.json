{
  "compilerOptions": {
      "target": "ESNext",                     // we stop at 2020, since it's the highest we can go when using the closure compiler.
      "module": "ESNext",                     // Sets the module system for the program. See the Modules reference page for more information. You very likely want "CommonJS" for node projects.
      "moduleResolution": "Node",             // Specify the module resolution strategy, should this be "nodenext"
      "strict": true,                         // The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness. Turning this on is equivalent to enabling all of the strict mode family options, which are outlined below. You can then turn off individual strict mode family checks as needed.
      "strictNullChecks": true,               // When type checking, take into account null and undefined.
      "noImplicitAny": true,                  // any not allowed
      "composite": true,                      // The composite option enforces certain constraints which make it possible for build tools (including TypeScript itself, under --build mode) to quickly determine if a project has been built yet.
      "declaration": true,                    // Generate .d.ts files for every TypeScript or JavaScript file inside your project.
      // "declarationMap": true,                // Generates a source map for .d.ts files which map back to the original .ts source file. This will allow editors such as VS Code to go to the original .ts file when using features like Go to Definition.
      // "sourceMap": true,
      "inlineSourceMap": true,                // When set, instead of writing out a .js.map file to provide source maps, TypeScript will embed the source map content in the .js files.
      // "incremental": true,                    // "composite: true" forces this to be true. Tells TypeScript to save information about the project graph from the last compilation to files stored on disk.
      "allowSyntheticDefaultImports": true,   // Allow 'import x from y' when a module doesn't have a default export.
      "noUncheckedIndexedAccess": true,    // Add undefined to a type when accessed using an index.
      "resolveJsonModule": true,              // Enable importing .json files
      "esModuleInterop": true,                // Emit additional JavaScript to ease support for importing CommonJS modules. This enables allowSyntheticDefaultImports for type compatibility.
      "paths": {
        "@bd/central": ["./apps/central/src/Central.ts"],
        "@bd/is-even": ["./libs/is-even/src/index.ts"],
        "@bd/is-odd": ["./libs/is-odd/src/index.ts"],
        "@bd/observables": ["./libs/observables/src/index.ts"],
        "@bd/core": ["./libs/components/core/src/index.ts"],
        "@bd/material": ["./libs/components/material/src/index.ts"]
      }
  }
}